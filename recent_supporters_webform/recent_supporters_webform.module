<?php

use \Drupal\little_helpers\Webform\Submission;

/**
 * Implements hook_menu().
 */
function recent_supporters_webform_menu() {
  $items['admin/config/content/recent-supporters/webform'] = array(
    'title'            => t('Webform backend'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('recent_supporters_webform_settings_form'),
    'description'      => t('Settings for the recent supporters webform backend.'),
    'access arguments' => array('administer recent supporters'),
    'file'             => 'recent_supporters_webform.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Get the current webform form_key mapping.
 */
function recent_supporters_webform_mapping() {
  $settings = variable_get('recent_supporters_webform_mapping', array()) + array(
    'first_name' => array('first_name', 'firstname'),
    'last_name' => array('last_name', 'lastname'),
    'country' => array('country'),
    'comment' => array('comment'),
  );
  return $settings;
}

/**
 * Get the current cron settings.
 */
function recent_supporters_webform_cron_settings() {
  $settings = variable_get('recent_supporters_webform_cron', array()) + array(
    'max_age' => 7776000, // 90 days in seconds.
    'max_number' => 15,
  );
  return $settings;
}

/**
 * Implements hook_recent_supporters_backend_info().
 */
function recent_supporters_webform_recent_supporters_backend_info() {
  $backends['webform'] = '\\Drupal\\recent_supporters_webform\\WebformBackend';
  return $backends;
}

/**
 * Implements hook_webform_submission_insert().
 */
function recent_supporters_webform_webform_submission_insert($node, $submission) {
  if ($submission->is_draft) {
    return;
  }

  $submissionObj = new Submission($node, $submission);
  $map = recent_supporters_webform_mapping();
  $fields = array();
  foreach ($map as $field => $form_keys) {
    $fields[$field] = NULL;
    foreach ($form_keys as $key) {
      if ($value = $submissionObj->valueByKey($key)) {
        $fields[$field] = $value;
        break;
      }
    }
  }
  foreach (['first_name', 'last_name'] as $r) {
    if (empty($fields[$r])) {
      // This webform submission doesn't contain all the data we need.
      return;
    }
  }

  $dbkey['nid'] = $node->nid;
  $dbkey['sid'] = $submission->sid;
  $fields['timestamp'] = $submissionObj->submitted;

  // Optionally get the country from geoip.
  if (!$fields['country'] && function_exists('geoip_country_code_by_name')) {
    // Use @, see: https://bugs.php.net/bug.php?id=59753
    $fields['country'] = @geoip_country_code_by_name($submission->remote_addr);
  }

  db_merge('recent_supporters_webform')
    ->key($dbkey)
    ->fields($fields)
    ->execute();
}

/**
 * Implements hook_webform_submission_update().
 */
function recent_supporters_webform_webform_submission_update($node, $submission) {
  recent_supporters_webform_webform_submission_insert($node, $submission);
}

/**
 * Implements hook_webform_submission_delete().
 */
function recent_supporters_webform_webform_submission_delete($node, $submission) {
  db_delete('recent_supporters_webform')
    ->condition('sid', $submission->sid)
    ->execute();
}

/**
 * Implements hook_node_delete().
 */
function recent_supporters_webform_node_delete($node) {
  db_delete('recent_supporters_webform')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_cron().
 *
 * Keep the list of recent supporters short.
 *  - Delete all entries older than a maximum age.
 *  - Limit the number of entries per action to the most recent.
 */
function recent_supporters_webform_cron() {
  $settings = recent_supporters_webform_cron_settings();

  $table = 'recent_supporters_webform';
  if ($settings['max_age'] > 0) {
    db_delete($table)
      ->condition('timestamp', REQUEST_TIME - $settings['max_age'], '<')
      ->execute();
  }

  if ($settings['max_number'] > 0) {
    // Get all nids with more than max_number recent supporters.
    // Usually these are only a few nids.
    $transaction = db_transaction();
    $args[':limit'] = $settings['max_number'];
    $nids = db_query("SELECT nid FROM {{$table}} GROUP BY nid HAVING count(1) > :limit", $args)->fetchCol();

    foreach ($nids as $nid) {
      // Find timestamp of the oldest entry that we want to keep.
      $last = $settings['max_number'] - 1;
      $args = array(':nid' => $nid);
      $timestamp = db_query("SELECT timestamp FROM {{$table}} WHERE nid=:nid ORDER BY timestamp DESC LIMIT $last, 1", $args)->fetchField();
      // Delete all older entries for this node.
      $args = array(':nid' => $nid, ':timestamp' => $timestamp);
      db_query("DELETE FROM {{$table}} WHERE nid=:nid AND timestamp<:timestamp", $args);
    }
  }
}
