// Generated by CoffeeScript 1.9.3
var $, RecentSupportersGlobal, RecentSupportersItem, construct_from_element;

$ = jQuery;

RecentSupportersItem = (function() {
  function RecentSupportersItem(settings, element) {
    this.settings = settings;
    this.fn = element.recentSupporters(this.settings);
  }

  RecentSupportersItem.prototype.poll = function() {
    var callback;
    callback = (function(_this) {
      return function(data) {
        data = data.recent_supporters[_this.settings.field_name][_this.settings.delta];
        _this.fn.update({
          supporters: data
        });
      };
    })(this);
    return Drupal.behaviors.polling.registry.registerUrl(this.settings.pollingURL, this.settings.id, callback);
  };

  return RecentSupportersItem;

})();

RecentSupportersGlobal = (function() {
  function RecentSupportersGlobal(settings, element) {
    this.settings = settings;
    this.fn = element.recentSupporters(this.settings);
  }

  RecentSupportersGlobal.prototype.poll = function() {
    var callback;
    callback = (function(_this) {
      return function(data) {
        data = data.recent_supporters;
        _this.fn.update({
          supporters: data
        });
      };
    })(this);
    return Drupal.behaviors.polling.registry.registerUrl(this.settings.pollingURL, this.settings.id, callback);
  };

  return RecentSupportersGlobal;

})();

construct_from_element = function($element) {
  var id, settings;
  id = $element.attr('id');
  settings = Drupal.settings.recentSupporters.blocks[id];
  settings['id'] = id;
  if (settings.allActions) {
    settings['texts'] = Drupal.settings.recentSupporters.actionTexts;
    return new RecentSupportersGlobal(settings, $element);
  } else {
    return new RecentSupportersItem(settings, $element);
  }
};

Drupal.behaviors.recent_supporters = {};

Drupal.behaviors.recent_supporters.attach = function(context, settings) {
  return $('.recent-supporters-wrapper', context).each(function() {
    var item;
    item = construct_from_element($(this));
    if (item) {
      return item.poll();
    }
  });
};
